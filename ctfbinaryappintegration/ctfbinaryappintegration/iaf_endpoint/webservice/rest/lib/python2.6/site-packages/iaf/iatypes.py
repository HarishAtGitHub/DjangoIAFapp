# ./iatypes.py
# PyXB bindings for NM:1e8919d0a5cb4f93b7512f6364311e5ecde5fb42
# Generated 2012-02-14 14:37:15.605164 by PyXB version 1.1.3
# Namespace http://www.collab.net/teamforge/integratedapp

import pyxb
import pyxb.binding
import pyxb.binding.saxer
import StringIO
import pyxb.utils.utility
import pyxb.utils.domutils
import sys

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:49e30fd0-56eb-11e1-b689-005056010001')

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

Namespace = pyxb.namespace.NamespaceForURI(u'http://www.collab.net/teamforge/integratedapp', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])
ModuleRecord = Namespace.lookupModuleRecordByUID(_GenerationUID, create_if_missing=True)
ModuleRecord._setModule(sys.modules[__name__])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a Python instance."""
    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement)
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=Namespace.fallbackNamespace(), location_base=location_base)
    handler = saxer.getContentHandler()
    saxer.parse(StringIO.StringIO(xml_text))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, _fallback_namespace=default_namespace)


# Complex type BaseRequest with content type EMPTY
class BaseRequest (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'BaseRequest')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'BaseRequest', BaseRequest)


# Complex type CTD_ANON with content type ELEMENT_ONLY
class CTD_ANON (BaseRequest):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseRequest
    
    # Element {http://www.collab.net/teamforge/integratedapp}creatorId uses Python identifier creatorId
    __creatorId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'creatorId'), 'creatorId', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_httpwww_collab_netteamforgeintegratedappcreatorId', False)

    
    creatorId = property(__creatorId.value, __creatorId.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}sourceProjectId uses Python identifier sourceProjectId
    __sourceProjectId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sourceProjectId'), 'sourceProjectId', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_httpwww_collab_netteamforgeintegratedappsourceProjectId', False)

    
    sourceProjectId = property(__sourceProjectId.value, __sourceProjectId.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}templateId uses Python identifier templateId
    __templateId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'templateId'), 'templateId', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_httpwww_collab_netteamforgeintegratedapptemplateId', False)

    
    templateId = property(__templateId.value, __templateId.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}templateName uses Python identifier templateName
    __templateName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'templateName'), 'templateName', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_httpwww_collab_netteamforgeintegratedapptemplateName', False)

    
    templateName = property(__templateName.value, __templateName.set, None, None)


    _ElementMap = BaseRequest._ElementMap.copy()
    _ElementMap.update({
        __creatorId.name() : __creatorId,
        __sourceProjectId.name() : __sourceProjectId,
        __templateId.name() : __templateId,
        __templateName.name() : __templateName
    })
    _AttributeMap = BaseRequest._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type CTD_ANON_ with content type ELEMENT_ONLY
class CTD_ANON_ (BaseRequest):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseRequest
    
    # Element {http://www.collab.net/teamforge/integratedapp}integratedAppId uses Python identifier integratedAppId
    __integratedAppId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'integratedAppId'), 'integratedAppId', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON__httpwww_collab_netteamforgeintegratedappintegratedAppId', False)

    
    integratedAppId = property(__integratedAppId.value, __integratedAppId.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}commitMessage uses Python identifier commitMessage
    __commitMessage = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'commitMessage'), 'commitMessage', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON__httpwww_collab_netteamforgeintegratedappcommitMessage', False)

    
    commitMessage = property(__commitMessage.value, __commitMessage.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}filesChanged uses Python identifier filesChanged
    __filesChanged = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'filesChanged'), 'filesChanged', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON__httpwww_collab_netteamforgeintegratedappfilesChanged', False)

    
    filesChanged = property(__filesChanged.value, __filesChanged.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}commitId uses Python identifier commitId
    __commitId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'commitId'), 'commitId', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON__httpwww_collab_netteamforgeintegratedappcommitId', False)

    
    commitId = property(__commitId.value, __commitId.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}userId uses Python identifier userId
    __userId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'userId'), 'userId', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON__httpwww_collab_netteamforgeintegratedappuserId', False)

    
    userId = property(__userId.value, __userId.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}scmIntegrationServerId uses Python identifier scmIntegrationServerId
    __scmIntegrationServerId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'scmIntegrationServerId'), 'scmIntegrationServerId', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON__httpwww_collab_netteamforgeintegratedappscmIntegrationServerId', False)

    
    scmIntegrationServerId = property(__scmIntegrationServerId.value, __scmIntegrationServerId.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}projectId uses Python identifier projectId
    __projectId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'projectId'), 'projectId', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON__httpwww_collab_netteamforgeintegratedappprojectId', False)

    
    projectId = property(__projectId.value, __projectId.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}repositoryPath uses Python identifier repositoryPath
    __repositoryPath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'repositoryPath'), 'repositoryPath', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON__httpwww_collab_netteamforgeintegratedapprepositoryPath', False)

    
    repositoryPath = property(__repositoryPath.value, __repositoryPath.set, None, None)


    _ElementMap = BaseRequest._ElementMap.copy()
    _ElementMap.update({
        __integratedAppId.name() : __integratedAppId,
        __commitMessage.name() : __commitMessage,
        __filesChanged.name() : __filesChanged,
        __commitId.name() : __commitId,
        __userId.name() : __userId,
        __scmIntegrationServerId.name() : __scmIntegrationServerId,
        __projectId.name() : __projectId,
        __repositoryPath.name() : __repositoryPath
    })
    _AttributeMap = BaseRequest._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type User with content type ELEMENT_ONLY
class User (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'User')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.collab.net/teamforge/integratedapp}locale uses Python identifier locale
    __locale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'locale'), 'locale', '__httpwww_collab_netteamforgeintegratedapp_User_httpwww_collab_netteamforgeintegratedapplocale', False)

    
    locale = property(__locale.value, __locale.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}userId uses Python identifier userId
    __userId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'userId'), 'userId', '__httpwww_collab_netteamforgeintegratedapp_User_httpwww_collab_netteamforgeintegratedappuserId', False)

    
    userId = property(__userId.value, __userId.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}name uses Python identifier name
    __name = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'name'), 'name', '__httpwww_collab_netteamforgeintegratedapp_User_httpwww_collab_netteamforgeintegratedappname', False)

    
    name = property(__name.value, __name.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}userName uses Python identifier userName
    __userName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'userName'), 'userName', '__httpwww_collab_netteamforgeintegratedapp_User_httpwww_collab_netteamforgeintegratedappuserName', False)

    
    userName = property(__userName.value, __userName.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}email uses Python identifier email
    __email = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'email'), 'email', '__httpwww_collab_netteamforgeintegratedapp_User_httpwww_collab_netteamforgeintegratedappemail', False)

    
    email = property(__email.value, __email.set, None, None)

    # Element {http://www.collab.net/teamforge/integratedapp}superUser uses Python identifier superUser
    __superUser = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'superUser'), 'superUser', '__httpwww_collab_netteamforgeintegratedapp_User_httpwww_collab_netteamforgeintegratedappsuperUser', False)


    superUser = property(__superUser.value, __superUser.set, None, None)

    _ElementMap = {
        __locale.name() : __locale,
        __userId.name() : __userId,
        __name.name() : __name,
        __userName.name() : __userName,
        __email.name() : __email,
        __superUser.name() : __superUser

    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'User', User)


# Complex type CTD_ANON_2 with content type ELEMENT_ONLY
class CTD_ANON_2 (BaseRequest):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseRequest
    
    # Element {http://www.collab.net/teamforge/integratedapp}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'Configuration'), 'Configuration', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_2_httpwww_collab_netteamforgeintegratedappConfiguration', False)

    
    Configuration = property(__Configuration.value, __Configuration.set, None, None)


    _ElementMap = BaseRequest._ElementMap.copy()
    _ElementMap.update({
        __Configuration.name() : __Configuration
    })
    _AttributeMap = BaseRequest._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type CTD_ANON_3 with content type ELEMENT_ONLY
class CTD_ANON_3 (BaseRequest):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseRequest
    
    # Element {http://www.collab.net/teamforge/integratedapp}includeComment uses Python identifier includeComment
    __includeComment = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'includeComment'), 'includeComment', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_3_httpwww_collab_netteamforgeintegratedappincludeComment', False)

    
    includeComment = property(__includeComment.value, __includeComment.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}includeDocument uses Python identifier includeDocument
    __includeDocument = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'includeDocument'), 'includeDocument', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_3_httpwww_collab_netteamforgeintegratedappincludeDocument', False)

    
    includeDocument = property(__includeDocument.value, __includeDocument.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}projects uses Python identifier projects
    __projects = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'projects'), 'projects', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_3_httpwww_collab_netteamforgeintegratedappprojects', True)

    
    projects = property(__projects.value, __projects.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}integratedAppName uses Python identifier integratedAppName
    __integratedAppName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'integratedAppName'), 'integratedAppName', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_3_httpwww_collab_netteamforgeintegratedappintegratedAppName', False)

    
    integratedAppName = property(__integratedAppName.value, __integratedAppName.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}keyword uses Python identifier keyword
    __keyword = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'keyword'), 'keyword', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_3_httpwww_collab_netteamforgeintegratedappkeyword', False)

    
    keyword = property(__keyword.value, __keyword.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}includeAttachment uses Python identifier includeAttachment
    __includeAttachment = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'includeAttachment'), 'includeAttachment', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_3_httpwww_collab_netteamforgeintegratedappincludeAttachment', False)

    
    includeAttachment = property(__includeAttachment.value, __includeAttachment.set, None, None)


    _ElementMap = BaseRequest._ElementMap.copy()
    _ElementMap.update({
        __includeComment.name() : __includeComment,
        __includeDocument.name() : __includeDocument,
        __projects.name() : __projects,
        __integratedAppName.name() : __integratedAppName,
        __keyword.name() : __keyword,
        __includeAttachment.name() : __includeAttachment
    })
    _AttributeMap = BaseRequest._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type BaseResponse with content type EMPTY
class BaseResponse (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'BaseResponse')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'BaseResponse', BaseResponse)


# Complex type CTD_ANON_4 with content type ELEMENT_ONLY
class CTD_ANON_4 (BaseResponse):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseResponse
    
    # Element {http://www.collab.net/teamforge/integratedapp}templateMetadata uses Python identifier templateMetadata
    __templateMetadata = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'templateMetadata'), 'templateMetadata', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_4_httpwww_collab_netteamforgeintegratedapptemplateMetadata', True)

    
    templateMetadata = property(__templateMetadata.value, __templateMetadata.set, None, None)


    _ElementMap = BaseResponse._ElementMap.copy()
    _ElementMap.update({
        __templateMetadata.name() : __templateMetadata
    })
    _AttributeMap = BaseResponse._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type CTD_ANON_5 with content type ELEMENT_ONLY
class CTD_ANON_5 (BaseResponse):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseResponse
    
    # Element {http://www.collab.net/teamforge/integratedapp}ConfigurationParameter uses Python identifier ConfigurationParameter
    __ConfigurationParameter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ConfigurationParameter'), 'ConfigurationParameter', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_5_httpwww_collab_netteamforgeintegratedappConfigurationParameter', True)

    
    ConfigurationParameter = property(__ConfigurationParameter.value, __ConfigurationParameter.set, None, None)


    _ElementMap = BaseResponse._ElementMap.copy()
    _ElementMap.update({
        __ConfigurationParameter.name() : __ConfigurationParameter
    })
    _AttributeMap = BaseResponse._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type CTD_ANON_6 with content type ELEMENT_ONLY
class CTD_ANON_6 (BaseResponse):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseResponse
    
    # Element {http://www.collab.net/teamforge/integratedapp}results uses Python identifier results
    __results = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'results'), 'results', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_6_httpwww_collab_netteamforgeintegratedappresults', False)

    
    results = property(__results.value, __results.set, None, None)


    _ElementMap = BaseResponse._ElementMap.copy()
    _ElementMap.update({
        __results.name() : __results
    })
    _AttributeMap = BaseResponse._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type KeyValuesPair with content type ELEMENT_ONLY
class KeyValuesPair (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'KeyValuesPair')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.collab.net/teamforge/integratedapp}value uses Python identifier value_
    __value = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'value'), 'value_', '__httpwww_collab_netteamforgeintegratedapp_KeyValuesPair_httpwww_collab_netteamforgeintegratedappvalue', True)

    
    value_ = property(__value.value, __value.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}key uses Python identifier key
    __key = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'key'), 'key', '__httpwww_collab_netteamforgeintegratedapp_KeyValuesPair_httpwww_collab_netteamforgeintegratedappkey', False)

    
    key = property(__key.value, __key.set, None, None)


    _ElementMap = {
        __value.name() : __value,
        __key.name() : __key
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'KeyValuesPair', KeyValuesPair)


# Complex type CTD_ANON_7 with content type ELEMENT_ONLY
class CTD_ANON_7 (BaseResponse):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseResponse
    
    # Element {http://www.collab.net/teamforge/integratedapp}projectId uses Python identifier projectId
    __projectId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'projectId'), 'projectId', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_7_httpwww_collab_netteamforgeintegratedappprojectId', False)

    
    projectId = property(__projectId.value, __projectId.set, None, None)


    _ElementMap = BaseResponse._ElementMap.copy()
    _ElementMap.update({
        __projectId.name() : __projectId
    })
    _AttributeMap = BaseResponse._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type CTD_ANON_8 with content type ELEMENT_ONLY
class CTD_ANON_8 (BaseResponse):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseResponse
    
    # Element {http://www.collab.net/teamforge/integratedapp}content uses Python identifier content_
    __content = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'content'), 'content_', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_8_httpwww_collab_netteamforgeintegratedappcontent', False)

    
    content_ = property(__content.value, __content.set, None, None)


    _ElementMap = BaseResponse._ElementMap.copy()
    _ElementMap.update({
        __content.name() : __content
    })
    _AttributeMap = BaseResponse._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type Configuration with content type ELEMENT_ONLY
class Configuration (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'Configuration')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.collab.net/teamforge/integratedapp}projectURL uses Python identifier projectURL
    __projectURL = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'projectURL'), 'projectURL', '__httpwww_collab_netteamforgeintegratedapp_Configuration_httpwww_collab_netteamforgeintegratedappprojectURL', False)

    
    projectURL = property(__projectURL.value, __projectURL.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}template uses Python identifier template
    __template = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'template'), 'template', '__httpwww_collab_netteamforgeintegratedapp_Configuration_httpwww_collab_netteamforgeintegratedapptemplate', False)

    
    template = property(__template.value, __template.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}version uses Python identifier version
    __version = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'version'), 'version', '__httpwww_collab_netteamforgeintegratedapp_Configuration_httpwww_collab_netteamforgeintegratedappversion', False)

    
    version = property(__version.value, __version.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}projectId uses Python identifier projectId
    __projectId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'projectId'), 'projectId', '__httpwww_collab_netteamforgeintegratedapp_Configuration_httpwww_collab_netteamforgeintegratedappprojectId', False)

    
    projectId = property(__projectId.value, __projectId.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}ConfigurationParameter uses Python identifier ConfigurationParameter
    __ConfigurationParameter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ConfigurationParameter'), 'ConfigurationParameter', '__httpwww_collab_netteamforgeintegratedapp_Configuration_httpwww_collab_netteamforgeintegratedappConfigurationParameter', True)

    
    ConfigurationParameter = property(__ConfigurationParameter.value, __ConfigurationParameter.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}projectName uses Python identifier projectName
    __projectName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'projectName'), 'projectName', '__httpwww_collab_netteamforgeintegratedapp_Configuration_httpwww_collab_netteamforgeintegratedappprojectName', False)

    
    projectName = property(__projectName.value, __projectName.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}locked uses Python identifier locked
    __locked = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'locked'), 'locked', '__httpwww_collab_netteamforgeintegratedapp_Configuration_httpwww_collab_netteamforgeintegratedapplocked', False)

    
    locked = property(__locked.value, __locked.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}parentProjectId uses Python identifier parentProjectId
    __parentProjectId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'parentProjectId'), 'parentProjectId', '__httpwww_collab_netteamforgeintegratedapp_Configuration_httpwww_collab_netteamforgeintegratedappparentProjectId', False)

    
    parentProjectId = property(__parentProjectId.value, __parentProjectId.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}userId uses Python identifier userId
    __userId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'userId'), 'userId', '__httpwww_collab_netteamforgeintegratedapp_Configuration_httpwww_collab_netteamforgeintegratedappuserId', False)

    
    userId = property(__userId.value, __userId.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}deleted uses Python identifier deleted
    __deleted = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'deleted'), 'deleted', '__httpwww_collab_netteamforgeintegratedapp_Configuration_httpwww_collab_netteamforgeintegratedappdeleted', False)

    
    deleted = property(__deleted.value, __deleted.set, None, None)


    _ElementMap = {
        __projectURL.name() : __projectURL,
        __template.name() : __template,
        __version.name() : __version,
        __projectId.name() : __projectId,
        __ConfigurationParameter.name() : __ConfigurationParameter,
        __projectName.name() : __projectName,
        __locked.name() : __locked,
        __parentProjectId.name() : __parentProjectId,
        __userId.name() : __userId,
        __deleted.name() : __deleted
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'Configuration', Configuration)


# Complex type CTD_ANON_9 with content type ELEMENT_ONLY
class CTD_ANON_9 (BaseRequest):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseRequest
    
    # Element {http://www.collab.net/teamforge/integratedapp}locale uses Python identifier locale
    __locale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'locale'), 'locale', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_9_httpwww_collab_netteamforgeintegratedapplocale', False)

    
    locale = property(__locale.value, __locale.set, None, None)


    _ElementMap = BaseRequest._ElementMap.copy()
    _ElementMap.update({
        __locale.name() : __locale
    })
    _AttributeMap = BaseRequest._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type CTD_ANON_10 with content type ELEMENT_ONLY
class CTD_ANON_10 (BaseResponse):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseResponse
    
    # Element {http://www.collab.net/teamforge/integratedapp}title uses Python identifier title
    __title = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'title'), 'title', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_10_httpwww_collab_netteamforgeintegratedapptitle', False)

    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = BaseResponse._ElementMap.copy()
    _ElementMap.update({
        __title.name() : __title
    })
    _AttributeMap = BaseResponse._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type CTD_ANON_11 with content type ELEMENT_ONLY
class CTD_ANON_11 (BaseResponse):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseResponse
    
    # Element {http://www.collab.net/teamforge/integratedapp}templateContent uses Python identifier templateContent
    __templateContent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'templateContent'), 'templateContent', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_11_httpwww_collab_netteamforgeintegratedapptemplateContent', True)

    
    templateContent = property(__templateContent.value, __templateContent.set, None, None)


    _ElementMap = BaseResponse._ElementMap.copy()
    _ElementMap.update({
        __templateContent.name() : __templateContent
    })
    _AttributeMap = BaseResponse._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type CTD_ANON_12 with content type ELEMENT_ONLY
class CTD_ANON_12 (BaseRequest):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseRequest
    
    # Element {http://www.collab.net/teamforge/integratedapp}objectIds uses Python identifier objectIds
    __objectIds = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'objectIds'), 'objectIds', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_12_httpwww_collab_netteamforgeintegratedappobjectIds', True)

    
    objectIds = property(__objectIds.value, __objectIds.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}integratedAppId uses Python identifier integratedAppId
    __integratedAppId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'integratedAppId'), 'integratedAppId', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_12_httpwww_collab_netteamforgeintegratedappintegratedAppId', False)

    
    integratedAppId = property(__integratedAppId.value, __integratedAppId.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}userId uses Python identifier userId
    __userId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'userId'), 'userId', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_12_httpwww_collab_netteamforgeintegratedappuserId', False)

    
    userId = property(__userId.value, __userId.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}projectId uses Python identifier projectId
    __projectId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'projectId'), 'projectId', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_12_httpwww_collab_netteamforgeintegratedappprojectId', False)

    
    projectId = property(__projectId.value, __projectId.set, None, None)


    _ElementMap = BaseRequest._ElementMap.copy()
    _ElementMap.update({
        __objectIds.name() : __objectIds,
        __integratedAppId.name() : __integratedAppId,
        __userId.name() : __userId,
        __projectId.name() : __projectId
    })
    _AttributeMap = BaseRequest._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type CTD_ANON_13 with content type ELEMENT_ONLY
class CTD_ANON_13 (BaseRequest):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseRequest
    
    # Element {http://www.collab.net/teamforge/integratedapp}title uses Python identifier title
    __title = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'title'), 'title', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_13_httpwww_collab_netteamforgeintegratedapptitle', False)

    
    title = property(__title.value, __title.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'Configuration'), 'Configuration', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_13_httpwww_collab_netteamforgeintegratedappConfiguration', False)

    
    Configuration = property(__Configuration.value, __Configuration.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}templateId uses Python identifier templateId
    __templateId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'templateId'), 'templateId', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_13_httpwww_collab_netteamforgeintegratedapptemplateId', False)

    
    templateId = property(__templateId.value, __templateId.set, None, None)


    _ElementMap = BaseRequest._ElementMap.copy()
    _ElementMap.update({
        __title.name() : __title,
        __Configuration.name() : __Configuration,
        __templateId.name() : __templateId
    })
    _AttributeMap = BaseRequest._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type CTD_ANON_14 with content type ELEMENT_ONLY
class CTD_ANON_14 (BaseResponse):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseResponse
    
    # Element {http://www.collab.net/teamforge/integratedapp}result uses Python identifier result
    __result = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'result'), 'result', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_14_httpwww_collab_netteamforgeintegratedappresult', False)

    
    result = property(__result.value, __result.set, None, None)


    _ElementMap = BaseResponse._ElementMap.copy()
    _ElementMap.update({
        __result.name() : __result
    })
    _AttributeMap = BaseResponse._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type CTD_ANON_15 with content type ELEMENT_ONLY
class CTD_ANON_15 (BaseRequest):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseRequest
    
    # Element {http://www.collab.net/teamforge/integratedapp}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'Configuration'), 'Configuration', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_15_httpwww_collab_netteamforgeintegratedappConfiguration', False)

    
    Configuration = property(__Configuration.value, __Configuration.set, None, None)


    _ElementMap = BaseRequest._ElementMap.copy()
    _ElementMap.update({
        __Configuration.name() : __Configuration
    })
    _AttributeMap = BaseRequest._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type CTD_ANON_16 with content type ELEMENT_ONLY
class CTD_ANON_16 (BaseRequest):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseRequest
    
    # Element {http://www.collab.net/teamforge/integratedapp}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'Configuration'), 'Configuration', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_16_httpwww_collab_netteamforgeintegratedappConfiguration', False)

    
    Configuration = property(__Configuration.value, __Configuration.set, None, None)


    _ElementMap = BaseRequest._ElementMap.copy()
    _ElementMap.update({
        __Configuration.name() : __Configuration
    })
    _AttributeMap = BaseRequest._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type KeyValuePair with content type ELEMENT_ONLY
class KeyValuePair (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'KeyValuePair')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.collab.net/teamforge/integratedapp}value uses Python identifier value_
    __value = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'value'), 'value_', '__httpwww_collab_netteamforgeintegratedapp_KeyValuePair_httpwww_collab_netteamforgeintegratedappvalue', False)

    
    value_ = property(__value.value, __value.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}key uses Python identifier key
    __key = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'key'), 'key', '__httpwww_collab_netteamforgeintegratedapp_KeyValuePair_httpwww_collab_netteamforgeintegratedappkey', False)

    
    key = property(__key.value, __key.set, None, None)


    _ElementMap = {
        __value.name() : __value,
        __key.name() : __key
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'KeyValuePair', KeyValuePair)


# Complex type CTD_ANON_17 with content type ELEMENT_ONLY
class CTD_ANON_17 (BaseRequest):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseRequest
    
    # Element {http://www.collab.net/teamforge/integratedapp}projectId uses Python identifier projectId
    __projectId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'projectId'), 'projectId', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_17_httpwww_collab_netteamforgeintegratedappprojectId', False)

    
    projectId = property(__projectId.value, __projectId.set, None, None)


    _ElementMap = BaseRequest._ElementMap.copy()
    _ElementMap.update({
        __projectId.name() : __projectId
    })
    _AttributeMap = BaseRequest._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type CTD_ANON_18 with content type ELEMENT_ONLY
class CTD_ANON_18 (BaseRequest):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseRequest
    
    # Element {http://www.collab.net/teamforge/integratedapp}objectId uses Python identifier objectId
    __objectId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'objectId'), 'objectId', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_18_httpwww_collab_netteamforgeintegratedappobjectId', False)

    
    objectId = property(__objectId.value, __objectId.set, None, None)


    _ElementMap = BaseRequest._ElementMap.copy()
    _ElementMap.update({
        __objectId.name() : __objectId
    })
    _AttributeMap = BaseRequest._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type CTD_ANON_19 with content type ELEMENT_ONLY
class CTD_ANON_19 (BaseRequest):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseRequest
    
    # Element {http://www.collab.net/teamforge/integratedapp}locale uses Python identifier locale
    __locale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'locale'), 'locale', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_19_httpwww_collab_netteamforgeintegratedapplocale', False)

    
    locale = property(__locale.value, __locale.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}projectId uses Python identifier projectId
    __projectId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'projectId'), 'projectId', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_19_httpwww_collab_netteamforgeintegratedappprojectId', False)

    
    projectId = property(__projectId.value, __projectId.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}pageComponentParam uses Python identifier pageComponentParam
    __pageComponentParam = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pageComponentParam'), 'pageComponentParam', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_19_httpwww_collab_netteamforgeintegratedapppageComponentParam', False)

    
    pageComponentParam = property(__pageComponentParam.value, __pageComponentParam.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}projectIntegratedApplicationId uses Python identifier projectIntegratedApplicationId
    __projectIntegratedApplicationId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'projectIntegratedApplicationId'), 'projectIntegratedApplicationId', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_19_httpwww_collab_netteamforgeintegratedappprojectIntegratedApplicationId', False)

    
    projectIntegratedApplicationId = property(__projectIntegratedApplicationId.value, __projectIntegratedApplicationId.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}rowsPerPage uses Python identifier rowsPerPage
    __rowsPerPage = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rowsPerPage'), 'rowsPerPage', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_19_httpwww_collab_netteamforgeintegratedapprowsPerPage', False)

    
    rowsPerPage = property(__rowsPerPage.value, __rowsPerPage.set, None, None)


    _ElementMap = BaseRequest._ElementMap.copy()
    _ElementMap.update({
        __locale.name() : __locale,
        __projectId.name() : __projectId,
        __pageComponentParam.name() : __pageComponentParam,
        __projectIntegratedApplicationId.name() : __projectIntegratedApplicationId,
        __rowsPerPage.name() : __rowsPerPage
    })
    _AttributeMap = BaseRequest._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type CTD_ANON_20 with content type ELEMENT_ONLY
class CTD_ANON_20 (BaseRequest):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseRequest
    
    # Element {http://www.collab.net/teamforge/integratedapp}objectId uses Python identifier objectId
    __objectId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'objectId'), 'objectId', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_20_httpwww_collab_netteamforgeintegratedappobjectId', False)

    
    objectId = property(__objectId.value, __objectId.set, None, None)


    _ElementMap = BaseRequest._ElementMap.copy()
    _ElementMap.update({
        __objectId.name() : __objectId
    })
    _AttributeMap = BaseRequest._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type CTD_ANON_21 with content type ELEMENT_ONLY
class CTD_ANON_21 (BaseRequest):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseRequest
    
    # Element {http://www.collab.net/teamforge/integratedapp}locale uses Python identifier locale
    __locale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'locale'), 'locale', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_21_httpwww_collab_netteamforgeintegratedapplocale', False)

    
    locale = property(__locale.value, __locale.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}projectId uses Python identifier projectId
    __projectId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'projectId'), 'projectId', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_21_httpwww_collab_netteamforgeintegratedappprojectId', False)

    
    projectId = property(__projectId.value, __projectId.set, None, None)


    _ElementMap = BaseRequest._ElementMap.copy()
    _ElementMap.update({
        __locale.name() : __locale,
        __projectId.name() : __projectId
    })
    _AttributeMap = BaseRequest._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type CTD_ANON_22 with content type ELEMENT_ONLY
class CTD_ANON_22 (BaseResponse):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseResponse
    
    # Element {http://www.collab.net/teamforge/integratedapp}PageComponentParameters uses Python identifier PageComponentParameters
    __PageComponentParameters = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'PageComponentParameters'), 'PageComponentParameters', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_22_httpwww_collab_netteamforgeintegratedappPageComponentParameters', True)

    
    PageComponentParameters = property(__PageComponentParameters.value, __PageComponentParameters.set, None, None)


    _ElementMap = BaseResponse._ElementMap.copy()
    _ElementMap.update({
        __PageComponentParameters.name() : __PageComponentParameters
    })
    _AttributeMap = BaseResponse._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type CTD_ANON_23 with content type ELEMENT_ONLY
class CTD_ANON_23 (BaseRequest):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseRequest
    
    # Element {http://www.collab.net/teamforge/integratedapp}user uses Python identifier user
    __user = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'user'), 'user', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_23_httpwww_collab_netteamforgeintegratedappuser', False)

    
    user = property(__user.value, __user.set, None, None)


    _ElementMap = BaseRequest._ElementMap.copy()
    _ElementMap.update({
        __user.name() : __user
    })
    _AttributeMap = BaseRequest._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type CTD_ANON_24 with content type ELEMENT_ONLY
class CTD_ANON_24 (BaseRequest):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseRequest
    
    # Element {http://www.collab.net/teamforge/integratedapp}user uses Python identifier user
    __user = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'user'), 'user', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_24_httpwww_collab_netteamforgeintegratedappuser', False)

    
    user = property(__user.value, __user.set, None, None)


    _ElementMap = BaseRequest._ElementMap.copy()
    _ElementMap.update({
        __user.name() : __user
    })
    _AttributeMap = BaseRequest._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type CTD_ANON_25 with content type ELEMENT_ONLY
class CTD_ANON_25 (BaseRequest):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseRequest
    
    # Element {http://www.collab.net/teamforge/integratedapp}locale uses Python identifier locale
    __locale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'locale'), 'locale', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_25_httpwww_collab_netteamforgeintegratedapplocale', False)

    
    locale = property(__locale.value, __locale.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}templateName uses Python identifier templateName
    __templateName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'templateName'), 'templateName', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_25_httpwww_collab_netteamforgeintegratedapptemplateName', False)

    
    templateName = property(__templateName.value, __templateName.set, None, None)


    _ElementMap = BaseRequest._ElementMap.copy()
    _ElementMap.update({
        __locale.name() : __locale,
        __templateName.name() : __templateName
    })
    _AttributeMap = BaseRequest._AttributeMap.copy()
    _AttributeMap.update({
        
    })



# Complex type ConfigurationParameter with content type ELEMENT_ONLY
class ConfigurationParameter (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ConfigurationParameter')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.collab.net/teamforge/integratedapp}defaultValue uses Python identifier defaultValue
    __defaultValue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'defaultValue'), 'defaultValue', '__httpwww_collab_netteamforgeintegratedapp_ConfigurationParameter_httpwww_collab_netteamforgeintegratedappdefaultValue', False)

    
    defaultValue = property(__defaultValue.value, __defaultValue.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}valueType uses Python identifier valueType
    __valueType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'valueType'), 'valueType', '__httpwww_collab_netteamforgeintegratedapp_ConfigurationParameter_httpwww_collab_netteamforgeintegratedappvalueType', False)

    
    valueType = property(__valueType.value, __valueType.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}maxLength uses Python identifier maxLength
    __maxLength = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'maxLength'), 'maxLength', '__httpwww_collab_netteamforgeintegratedapp_ConfigurationParameter_httpwww_collab_netteamforgeintegratedappmaxLength', False)

    
    maxLength = property(__maxLength.value, __maxLength.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}displayType uses Python identifier displayType
    __displayType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'displayType'), 'displayType', '__httpwww_collab_netteamforgeintegratedapp_ConfigurationParameter_httpwww_collab_netteamforgeintegratedappdisplayType', False)

    
    displayType = property(__displayType.value, __displayType.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}title uses Python identifier title
    __title = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'title'), 'title', '__httpwww_collab_netteamforgeintegratedapp_ConfigurationParameter_httpwww_collab_netteamforgeintegratedapptitle', False)

    
    title = property(__title.value, __title.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}name uses Python identifier name
    __name = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'name'), 'name', '__httpwww_collab_netteamforgeintegratedapp_ConfigurationParameter_httpwww_collab_netteamforgeintegratedappname', False)

    
    name = property(__name.value, __name.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}description uses Python identifier description
    __description = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'description'), 'description', '__httpwww_collab_netteamforgeintegratedapp_ConfigurationParameter_httpwww_collab_netteamforgeintegratedappdescription', False)

    
    description = property(__description.value, __description.set, None, None)


    _ElementMap = {
        __defaultValue.name() : __defaultValue,
        __valueType.name() : __valueType,
        __maxLength.name() : __maxLength,
        __displayType.name() : __displayType,
        __title.name() : __title,
        __name.name() : __name,
        __description.name() : __description
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'ConfigurationParameter', ConfigurationParameter)


# Complex type CTD_ANON_26 with content type ELEMENT_ONLY
class CTD_ANON_26 (BaseRequest):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is BaseRequest
    
    # Element {http://www.collab.net/teamforge/integratedapp}title uses Python identifier title
    __title = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'title'), 'title', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_26_httpwww_collab_netteamforgeintegratedapptitle', False)

    
    title = property(__title.value, __title.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}Configuration uses Python identifier Configuration
    __Configuration = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'Configuration'), 'Configuration', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_26_httpwww_collab_netteamforgeintegratedappConfiguration', False)

    
    Configuration = property(__Configuration.value, __Configuration.set, None, None)

    
    # Element {http://www.collab.net/teamforge/integratedapp}projectConfigurationParameters uses Python identifier projectConfigurationParameters
    __projectConfigurationParameters = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'projectConfigurationParameters'), 'projectConfigurationParameters', '__httpwww_collab_netteamforgeintegratedapp_CTD_ANON_26_httpwww_collab_netteamforgeintegratedappprojectConfigurationParameters', True)

    
    projectConfigurationParameters = property(__projectConfigurationParameters.value, __projectConfigurationParameters.set, None, None)


    _ElementMap = BaseRequest._ElementMap.copy()
    _ElementMap.update({
        __title.name() : __title,
        __Configuration.name() : __Configuration,
        __projectConfigurationParameters.name() : __projectConfigurationParameters
    })
    _AttributeMap = BaseRequest._AttributeMap.copy()
    _AttributeMap.update({
        
    })



CreateTemplateRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CreateTemplateRequest'), CTD_ANON)
Namespace.addCategoryObject('elementBinding', CreateTemplateRequest.name().localName(), CreateTemplateRequest)

SCMPostCommitRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SCMPostCommitRequest'), CTD_ANON_)
Namespace.addCategoryObject('elementBinding', SCMPostCommitRequest.name().localName(), SCMPostCommitRequest)

CreateProjectConfigurationRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CreateProjectConfigurationRequest'), CTD_ANON_2)
Namespace.addCategoryObject('elementBinding', CreateProjectConfigurationRequest.name().localName(), CreateProjectConfigurationRequest)

SearchRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SearchRequest'), CTD_ANON_3)
Namespace.addCategoryObject('elementBinding', SearchRequest.name().localName(), SearchRequest)

GetTemplateMetadataResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'GetTemplateMetadataResponse'), CTD_ANON_4)
Namespace.addCategoryObject('elementBinding', GetTemplateMetadataResponse.name().localName(), GetTemplateMetadataResponse)

GetConfigurationParametersResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'GetConfigurationParametersResponse'), CTD_ANON_5)
Namespace.addCategoryObject('elementBinding', GetConfigurationParametersResponse.name().localName(), GetConfigurationParametersResponse)

SearchResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SearchResponse'), CTD_ANON_6)
Namespace.addCategoryObject('elementBinding', SearchResponse.name().localName(), SearchResponse)

GetProjectIdResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'GetProjectIdResponse'), CTD_ANON_7)
Namespace.addCategoryObject('elementBinding', GetProjectIdResponse.name().localName(), GetProjectIdResponse)

PageComponentContentResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PageComponentContentResponse'), CTD_ANON_8)
Namespace.addCategoryObject('elementBinding', PageComponentContentResponse.name().localName(), PageComponentContentResponse)

GetTemplateMetadataRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'GetTemplateMetadataRequest'), CTD_ANON_9)
Namespace.addCategoryObject('elementBinding', GetTemplateMetadataRequest.name().localName(), GetTemplateMetadataRequest)

GetTitleResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'GetTitleResponse'), CTD_ANON_10)
Namespace.addCategoryObject('elementBinding', GetTitleResponse.name().localName(), GetTitleResponse)

GetTemplateContentResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'GetTemplateContentResponse'), CTD_ANON_11)
Namespace.addCategoryObject('elementBinding', GetTemplateContentResponse.name().localName(), GetTemplateContentResponse)

SCMPreCommitRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SCMPreCommitRequest'), CTD_ANON_12)
Namespace.addCategoryObject('elementBinding', SCMPreCommitRequest.name().localName(), SCMPreCommitRequest)

CreateTemplatizedProjectConfigurationRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CreateTemplatizedProjectConfigurationRequest'), CTD_ANON_13)
Namespace.addCategoryObject('elementBinding', CreateTemplatizedProjectConfigurationRequest.name().localName(), CreateTemplatizedProjectConfigurationRequest)

SCMPreCommitResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'SCMPreCommitResponse'), CTD_ANON_14)
Namespace.addCategoryObject('elementBinding', SCMPreCommitResponse.name().localName(), SCMPreCommitResponse)

EditProjectConfigurationRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'EditProjectConfigurationRequest'), CTD_ANON_15)
Namespace.addCategoryObject('elementBinding', EditProjectConfigurationRequest.name().localName(), EditProjectConfigurationRequest)

DeleteProjectConfigurationRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DeleteProjectConfigurationRequest'), CTD_ANON_16)
Namespace.addCategoryObject('elementBinding', DeleteProjectConfigurationRequest.name().localName(), DeleteProjectConfigurationRequest)

GetConfigurationParametersRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'GetConfigurationParametersRequest'), CTD_ANON_17)
Namespace.addCategoryObject('elementBinding', GetConfigurationParametersRequest.name().localName(), GetConfigurationParametersRequest)

GetProjectIdRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'GetProjectIdRequest'), CTD_ANON_18)
Namespace.addCategoryObject('elementBinding', GetProjectIdRequest.name().localName(), GetProjectIdRequest)

PageComponentContentRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PageComponentContentRequest'), CTD_ANON_19)
Namespace.addCategoryObject('elementBinding', PageComponentContentRequest.name().localName(), PageComponentContentRequest)

GetTitleRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'GetTitleRequest'), CTD_ANON_20)
Namespace.addCategoryObject('elementBinding', GetTitleRequest.name().localName(), GetTitleRequest)

GetPageComponentParametersRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'GetPageComponentParametersRequest'), CTD_ANON_21)
Namespace.addCategoryObject('elementBinding', GetPageComponentParametersRequest.name().localName(), GetPageComponentParametersRequest)

GetPageComponentParametersResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'GetPageComponentParametersResponse'), CTD_ANON_22)
Namespace.addCategoryObject('elementBinding', GetPageComponentParametersResponse.name().localName(), GetPageComponentParametersResponse)

CreateUserRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CreateUserRequest'), CTD_ANON_23)
Namespace.addCategoryObject('elementBinding', CreateUserRequest.name().localName(), CreateUserRequest)

UpdateUserRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UpdateUserRequest'), CTD_ANON_24)
Namespace.addCategoryObject('elementBinding', UpdateUserRequest.name().localName(), UpdateUserRequest)

GetTemplateContentRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'GetTemplateContentRequest'), CTD_ANON_25)
Namespace.addCategoryObject('elementBinding', GetTemplateContentRequest.name().localName(), GetTemplateContentRequest)

ValidateParametersForTemplatizedProjectRequest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ValidateParametersForTemplatizedProjectRequest'), CTD_ANON_26)
Namespace.addCategoryObject('elementBinding', ValidateParametersForTemplatizedProjectRequest.name().localName(), ValidateParametersForTemplatizedProjectRequest)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'creatorId'), pyxb.binding.datatypes.string, scope=CTD_ANON))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sourceProjectId'), pyxb.binding.datatypes.string, scope=CTD_ANON))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'templateId'), pyxb.binding.datatypes.string, scope=CTD_ANON))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'templateName'), pyxb.binding.datatypes.string, scope=CTD_ANON))
CTD_ANON._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sourceProjectId')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'templateId')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'templateName')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'creatorId')), min_occurs=1, max_occurs=1)
    )
CTD_ANON._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'integratedAppId'), pyxb.binding.datatypes.string, scope=CTD_ANON_))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'commitMessage'), pyxb.binding.datatypes.string, scope=CTD_ANON_))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'filesChanged'), pyxb.binding.datatypes.string, scope=CTD_ANON_))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'commitId'), pyxb.binding.datatypes.string, scope=CTD_ANON_))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'userId'), pyxb.binding.datatypes.string, scope=CTD_ANON_))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'scmIntegrationServerId'), pyxb.binding.datatypes.string, scope=CTD_ANON_))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'projectId'), pyxb.binding.datatypes.string, scope=CTD_ANON_))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'repositoryPath'), pyxb.binding.datatypes.string, scope=CTD_ANON_))
CTD_ANON_._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'integratedAppId')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'projectId')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'userId')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'scmIntegrationServerId')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'repositoryPath')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'commitId')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'commitMessage')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'filesChanged')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_._GroupModel, min_occurs=1, max_occurs=1)



User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locale'), pyxb.binding.datatypes.string, scope=User))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'userId'), pyxb.binding.datatypes.string, scope=User))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'name'), pyxb.binding.datatypes.string, scope=User))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'userName'), pyxb.binding.datatypes.string, scope=User))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'email'), pyxb.binding.datatypes.string, scope=User))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'superUser'), pyxb.binding.datatypes.boolean, scope=User))
User._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(User._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'userId')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(User._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'name')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(User._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'userName')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(User._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'email')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(User._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locale')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(User._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'superUser')), min_occurs=1, max_occurs=1)
    )
User._ContentModel = pyxb.binding.content.ParticleModel(User._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Configuration'), Configuration, scope=CTD_ANON_2))
CTD_ANON_2._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Configuration')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_2._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_2._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'includeComment'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_3))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'includeDocument'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_3))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'projects'), pyxb.binding.datatypes.string, scope=CTD_ANON_3))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'integratedAppName'), pyxb.binding.datatypes.string, scope=CTD_ANON_3))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'keyword'), pyxb.binding.datatypes.string, scope=CTD_ANON_3))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'includeAttachment'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_3))
CTD_ANON_3._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'integratedAppName')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'keyword')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'includeAttachment')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'includeComment')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'includeDocument')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'projects')), min_occurs=0L, max_occurs=None)
    )
CTD_ANON_3._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_3._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'templateMetadata'), KeyValuesPair, scope=CTD_ANON_4))
CTD_ANON_4._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'templateMetadata')), min_occurs=0L, max_occurs=None)
    )
CTD_ANON_4._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_4._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ConfigurationParameter'), ConfigurationParameter, scope=CTD_ANON_5))
CTD_ANON_5._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ConfigurationParameter')), min_occurs=0L, max_occurs=None)
    )
CTD_ANON_5._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_5._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'results'), pyxb.binding.datatypes.string, scope=CTD_ANON_6))
CTD_ANON_6._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'results')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_6._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_6._GroupModel, min_occurs=1, max_occurs=1)



KeyValuesPair._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'value'), pyxb.binding.datatypes.string, scope=KeyValuesPair))

KeyValuesPair._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'key'), pyxb.binding.datatypes.string, scope=KeyValuesPair))
KeyValuesPair._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(KeyValuesPair._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'key')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(KeyValuesPair._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'value')), min_occurs=0L, max_occurs=None)
    )
KeyValuesPair._ContentModel = pyxb.binding.content.ParticleModel(KeyValuesPair._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'projectId'), pyxb.binding.datatypes.string, scope=CTD_ANON_7))
CTD_ANON_7._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'projectId')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_7._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_7._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'content'), pyxb.binding.datatypes.string, scope=CTD_ANON_8))
CTD_ANON_8._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'content')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_8._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_8._GroupModel, min_occurs=1, max_occurs=1)



Configuration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'projectURL'), pyxb.binding.datatypes.string, scope=Configuration))

Configuration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'template'), pyxb.binding.datatypes.boolean, scope=Configuration))

Configuration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'version'), pyxb.binding.datatypes.string, scope=Configuration))

Configuration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'projectId'), pyxb.binding.datatypes.string, scope=Configuration))

Configuration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ConfigurationParameter'), ConfigurationParameter, scope=Configuration))

Configuration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'projectName'), pyxb.binding.datatypes.string, scope=Configuration))

Configuration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locked'), pyxb.binding.datatypes.boolean, scope=Configuration))

Configuration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'parentProjectId'), pyxb.binding.datatypes.string, scope=Configuration))

Configuration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'userId'), pyxb.binding.datatypes.string, scope=Configuration))

Configuration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'deleted'), pyxb.binding.datatypes.boolean, scope=Configuration))
Configuration._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(Configuration._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'version')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(Configuration._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'projectId')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(Configuration._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'projectName')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(Configuration._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'projectURL')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(Configuration._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'parentProjectId')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(Configuration._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'userId')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(Configuration._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'deleted')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(Configuration._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locked')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(Configuration._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'template')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(Configuration._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ConfigurationParameter')), min_occurs=0L, max_occurs=None)
    )
Configuration._ContentModel = pyxb.binding.content.ParticleModel(Configuration._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locale'), pyxb.binding.datatypes.string, scope=CTD_ANON_9))
CTD_ANON_9._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locale')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_9._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_9._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'title'), pyxb.binding.datatypes.string, scope=CTD_ANON_10))
CTD_ANON_10._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'title')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_10._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_10._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'templateContent'), KeyValuesPair, scope=CTD_ANON_11))
CTD_ANON_11._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'templateContent')), min_occurs=0L, max_occurs=None)
    )
CTD_ANON_11._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_11._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'objectIds'), pyxb.binding.datatypes.string, scope=CTD_ANON_12))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'integratedAppId'), pyxb.binding.datatypes.string, scope=CTD_ANON_12))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'userId'), pyxb.binding.datatypes.string, scope=CTD_ANON_12))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'projectId'), pyxb.binding.datatypes.string, scope=CTD_ANON_12))
CTD_ANON_12._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'integratedAppId')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'projectId')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'userId')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'objectIds')), min_occurs=0L, max_occurs=None)
    )
CTD_ANON_12._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_12._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'title'), pyxb.binding.datatypes.string, scope=CTD_ANON_13))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Configuration'), Configuration, scope=CTD_ANON_13))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'templateId'), pyxb.binding.datatypes.string, scope=CTD_ANON_13))
CTD_ANON_13._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Configuration')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'templateId')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'title')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_13._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_13._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'result'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_14))
CTD_ANON_14._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'result')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_14._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_14._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Configuration'), Configuration, scope=CTD_ANON_15))
CTD_ANON_15._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Configuration')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_15._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_15._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Configuration'), Configuration, scope=CTD_ANON_16))
CTD_ANON_16._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Configuration')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_16._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_16._GroupModel, min_occurs=1, max_occurs=1)



KeyValuePair._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'value'), pyxb.binding.datatypes.string, scope=KeyValuePair))

KeyValuePair._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'key'), pyxb.binding.datatypes.string, scope=KeyValuePair))
KeyValuePair._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(KeyValuePair._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'key')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(KeyValuePair._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'value')), min_occurs=0L, max_occurs=1)
    )
KeyValuePair._ContentModel = pyxb.binding.content.ParticleModel(KeyValuePair._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'projectId'), pyxb.binding.datatypes.string, scope=CTD_ANON_17))
CTD_ANON_17._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'projectId')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_17._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_17._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'objectId'), pyxb.binding.datatypes.string, scope=CTD_ANON_18))
CTD_ANON_18._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'objectId')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_18._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_18._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locale'), pyxb.binding.datatypes.string, scope=CTD_ANON_19))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'projectId'), pyxb.binding.datatypes.string, scope=CTD_ANON_19))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pageComponentParam'), pyxb.binding.datatypes.string, scope=CTD_ANON_19))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'projectIntegratedApplicationId'), pyxb.binding.datatypes.string, scope=CTD_ANON_19))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rowsPerPage'), pyxb.binding.datatypes.string, scope=CTD_ANON_19))
CTD_ANON_19._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'projectId')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'projectIntegratedApplicationId')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pageComponentParam')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rowsPerPage')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locale')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_19._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_19._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'objectId'), pyxb.binding.datatypes.string, scope=CTD_ANON_20))
CTD_ANON_20._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'objectId')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_20._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_20._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locale'), pyxb.binding.datatypes.string, scope=CTD_ANON_21))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'projectId'), pyxb.binding.datatypes.string, scope=CTD_ANON_21))
CTD_ANON_21._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'projectId')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locale')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_21._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_21._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PageComponentParameters'), pyxb.binding.datatypes.string, scope=CTD_ANON_22))
CTD_ANON_22._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'PageComponentParameters')), min_occurs=0L, max_occurs=None)
    )
CTD_ANON_22._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_22._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'user'), User, scope=CTD_ANON_23))
CTD_ANON_23._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'user')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_23._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_23._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'user'), User, scope=CTD_ANON_24))
CTD_ANON_24._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'user')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_24._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_24._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locale'), pyxb.binding.datatypes.string, scope=CTD_ANON_25))

CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'templateName'), pyxb.binding.datatypes.string, scope=CTD_ANON_25))
CTD_ANON_25._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'templateName')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locale')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_25._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_25._GroupModel, min_occurs=1, max_occurs=1)



ConfigurationParameter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'defaultValue'), pyxb.binding.datatypes.string, scope=ConfigurationParameter))

ConfigurationParameter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'valueType'), pyxb.binding.datatypes.string, scope=ConfigurationParameter))

ConfigurationParameter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'maxLength'), pyxb.binding.datatypes.int, scope=ConfigurationParameter))

ConfigurationParameter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'displayType'), pyxb.binding.datatypes.string, scope=ConfigurationParameter))

ConfigurationParameter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'title'), pyxb.binding.datatypes.string, scope=ConfigurationParameter))

ConfigurationParameter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'name'), pyxb.binding.datatypes.string, scope=ConfigurationParameter))

ConfigurationParameter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'description'), pyxb.binding.datatypes.string, scope=ConfigurationParameter))
ConfigurationParameter._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ConfigurationParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'title')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ConfigurationParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'name')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ConfigurationParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'description')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ConfigurationParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'defaultValue')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ConfigurationParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'displayType')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ConfigurationParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'valueType')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ConfigurationParameter._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'maxLength')), min_occurs=1, max_occurs=1)
    )
ConfigurationParameter._ContentModel = pyxb.binding.content.ParticleModel(ConfigurationParameter._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'title'), pyxb.binding.datatypes.string, scope=CTD_ANON_26))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Configuration'), Configuration, scope=CTD_ANON_26))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'projectConfigurationParameters'), KeyValuePair, scope=CTD_ANON_26))
CTD_ANON_26._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Configuration')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'projectConfigurationParameters')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'title')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_26._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_26._GroupModel, min_occurs=1, max_occurs=1)
