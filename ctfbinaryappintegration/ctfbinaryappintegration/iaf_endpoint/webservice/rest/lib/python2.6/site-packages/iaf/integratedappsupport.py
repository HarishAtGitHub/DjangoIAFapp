
import SOAPpy

SOAP_PATH = '/ce-soap60/services/'

class IntegratedAppSupport(object):

    def __init__(self):
        self.is_loggedin = None
        self.project_id = None
        self.integrated_app_name = None
        self.project_path = None
        self.soap_sessionid = None
        self.ctf_base_url = None
        self.ia_base_url = None
        self.user_detail = None
        self.project_detail = None
        self.prpl_id = None

    # Getters and Setters
    def is_loggedin(self):
        """ check method for is Logged in
            check if the user is logged in ctf system """
        return self.is_loggedin

    def set_is_loggedin(self, is_loggedin):
        """set method for is logged in
           set if the user is logged in ctf system """
        self.is_loggedin = is_loggedin

    def get_project_id(self):
        """get the project Id"""
        return self.project_id

    def set_project_id(self, project_id):
        """ set ProjectId """
        self.project_id = project_id

    def get_integrated_app_name(self):
        """get Integrated App Name"""
        return self.integrated_app_name

    def set_integrated_app_name(self, integrated_app_name):
        """ set Integrated App Name """
        self.integrated_app_name = integrated_app_name

    def get_project_path(self):
        """ get the project Path """
        return self.project_path

    def set_project_path(self, project_path):
        """ set the project Path """
        self.project_path = project_path

    def get_soap_sessionid(self):
        """ get soap session id """
        return self.soap_sessionid

    def set_soap_sessionid(self, soap_sessionid):
        """ set soap session id """
        self.soap_sessionid = soap_sessionid

    def get_ctf_base_url(self):
        return self.ctf_base_url

    def set_ctf_base_url(self, ctf_base_url):
        ''' Set CTF Base url '''
        self.ctf_base_url = ctf_base_url

    def get_ia_base_url(self):
        return self.ia_base_url

    def set_ia_base_url(self, ia_base_url):
        self.ia_base_url = ia_base_url

    def get_user_detail(self):
        """ get User Detail - a single record of type struct will be stored in this variable """
        return self.user_detail

    def set_user_detail(self, user_detail):
        """ set User Detail - a single record of type struct will be stored in this variable """
        self.user_detail = user_detail

    def get_project_detail(self):
        """ get project detail - a single record of type struct will be stored in this variable """
        return self.project_detail

    def set_project_detail(self, project_detail):
        """ set project detail - a single record of type struct will be stored in this variable """
        self.project_detail = project_detail

    def get_prpl_id(self):
        """ get prpl id  """
        return self.prpl_id

    def set_prpl_id(self, prpl_id):
        """ set prpl id """
        self.prpl_id = prpl_id


    # Soap Getters
    def get_soap_base_url(self):
        """ return soap base url  """
        return self.append(self.get_ctf_base_url(), SOAP_PATH)

    def get_collabnet_soap(self):
        """ returns CollabNet soap """
        return SOAPpy.SOAPProxy(self.append(self.get_soap_base_url(), 'CollabNet'))

    def get_pluggable_soap(self):
        """ returns PluggableApp soap object """
        return SOAPpy.SOAPProxy(self.append(self.get_soap_base_url(), 'PluggableApp'))

    def get_scm_app_soap(self):
        """returns ScmApp Soap object"""
        return SOAPpy.SOAPProxy(self.append(self.get_soap_base_url(), 'ScmApp'))

    def get_rbac_app_soap(self):
        """returns RbacApp Soap object"""
        return SOAPpy.SOAPProxy(self.append(self.get_soap_base_url(), 'RbacApp'))

    # CollabNet Soap methods
    def get_current_user_data(self, sessionkey):
        """ invokes getCurrentUserData in CollabNet Soap """
        return self.get_collabnet_soap().getCurrentUserData(sessionkey)

    def get_user_data(self, sessionkey, user_name):
        """ invokes getUserData in CollabNet Soap """
        return self.get_collabnet_soap().getUserData(sessionkey, user_name)

    def get_project_by_path(self, session_key, project_path):
        """ invokes getProjectByPath in CollabNet Soap """
        return self.get_collabnet_soap().getProjectByPath(session_key, project_path)

    def get_project_by_projectid(self, session_key, projectid):
        """ invokes getProjectData in CollabNet Soap """
        try:
            return self.get_collabnet_soap().getProjectData(session_key, projectid)
        except:
            # the projectid could be a project group id
            return None

    def get_soap_sessionid_by_onetimetoken(self, onetimetoken):
        onetimetoken = str(onetimetoken)
        return self.get_collabnet_soap().getSessionId(onetimetoken)

    def has_permission(self, session_key, username, proj_id, perm_string, obj_id):
        return self.get_collabnet_soap().hasPermission(session_key, username, proj_id, perm_string, obj_id)

    # PluggableApp Soap methods
    def get_link_plugid(self, session_key, project_path):
        """ invokes getLinkPlugId in PluggableApp Soap  """
        project_path = str(project_path)
        return self.get_pluggable_soap().getLinkPlugId(session_key, project_path, self.get_ia_base_url())

    # RbacApp Soap methods
    def get_permissions_for_user(self, session_key, project_id, prpl_id):
        """ invokes getIntegratedAppPermissionsForProject in RbacApp Soap """
        return self.get_rbac_app_soap().getIntegratedAppPermissionsForProject(session_key, project_id, prpl_id)

    # Helper methods

    def append(self, first, second):
        """ joins two input strings  """
        return "%s%s" % (first, second)

    def form_project_path(self, proj_name):
        """ form a project path by using the project name """
        return "projects.%s" % (proj_name) if proj_name else None
  
    def strip_slash(self, s):
        '''Helper method that strips forward slashes 
        from both ends of a given string'''
        return str.strip(str(s), '/')

    def remove_unwanted_slash(self, *args):
        return map(self.strip_slash, args)

